(()=>{"use strict";var t={36:(t,e)=>{function i(t){return`#${t.toString(16).padStart(6,"0")}`}Object.defineProperty(e,"__esModule",{value:!0}),e.StateDiagram=void 0,e.StateDiagram=class{constructor(){this.queueHidden=!1,this.scale=1,this.lastUpdateInfo=null,this.stateCanvas=document.getElementById("states"),this.hitRegionCanvas=document.getElementById("stateHitRegion"),this.updateScale(),window.onresize=()=>{this.update(null,null)}}updateScale(){this.scale=(this.stateCanvas.getBoundingClientRect().width-4)/700,this.stateCanvas.width=700*this.scale,this.stateCanvas.height=500*this.scale,this.stateCanvas.style.height=500/700*(this.stateCanvas.getBoundingClientRect().width-4)+"px",this.hitRegionCanvas.height=500*this.scale,this.hitRegionCanvas.width=700*this.scale}update(t,e){if(this.updateScale(),null===t||null===e){if(null===this.lastUpdateInfo)return;t=this.lastUpdateInfo.data,e=this.lastUpdateInfo.activeState}this.clearCanvas(),this.drawTransitions(t),this.drawStates(e,t),this.lastUpdateInfo={data:t,activeState:e}}xTransform(t){return t*this.scale}yTransform(t){return t*this.scale}setQueueHidden(t){this.queueHidden=t}clearCanvas(){let t=this.stateCanvas.getContext("2d"),e=this.hitRegionCanvas.getContext("2d");t.clearRect(0,0,this.stateCanvas.width,this.stateCanvas.height),e.clearRect(0,0,this.hitRegionCanvas.width,this.hitRegionCanvas.height),t.fillStyle="white",e.fillStyle="white",t.fillRect(0,0,this.stateCanvas.width,this.stateCanvas.height),e.fillRect(0,0,this.hitRegionCanvas.width,this.hitRegionCanvas.height)}canvas_arrow(t,e,i,s,n){e=this.xTransform(e),i=this.yTransform(i),s=this.xTransform(s),n=this.yTransform(n);let o=10*this.scale,a=s-e,l=n-i,r=Math.atan2(l,a);t.beginPath(),t.moveTo(e,i),t.lineTo(s,n),t.lineTo(s-o*Math.cos(r-Math.PI/6),n-o*Math.sin(r-Math.PI/6)),t.moveTo(s,n),t.lineTo(s-o*Math.cos(r+Math.PI/6),n-o*Math.sin(r+Math.PI/6)),t.stroke(),t.closePath()}displayTransition(t){let e="";return null===t.input?e+="ε":e+=t.input,this.queueHidden||(e+=" : ",null===t.queueOut?e+="∅":e+=`(${t.queueOut.symbol}, ${t.queueOut.priority})`,e+=" ↦ ",null===t.queueIn?e+="∅":e+=`(${t.queueIn.symbol}, ${t.queueIn.priority})`),e}drawTransitions(t){let e=this.stateCanvas.getContext("2d"),s=this.hitRegionCanvas.getContext("2d"),n=0;e.strokeStyle="black";for(let{transition:o,path:a,labelPosition:l}of t.transitions){e.lineWidth=6*this.scale,e.beginPath();for(let{x:t,y:i}of a)e.lineTo(this.xTransform(t),this.yTransform(i));e.stroke(),e.closePath(),this.canvas_arrow(e,a[a.length-2].x,a[a.length-2].y,a[a.length-1].x,a[a.length-1].y),e.fillStyle="black",e.font=`${Math.round(16*this.scale)}px Arial`,e.textAlign="left",e.textBaseline="middle",e.fillText(this.displayTransition(o),this.xTransform(l.x),this.yTransform(l.y)),s.lineWidth=25*this.scale,s.strokeStyle=i(n),s.beginPath();for(let{x:t,y:e}of a)s.lineTo(this.xTransform(t),this.yTransform(e));s.stroke(),s.closePath(),n+=1}}drawStates(t,e){let i=this.stateCanvas.getContext("2d");for(let[s,{position:n,isAccepting:o}]of e.states)s===t?(i.fillStyle="yellow",i.strokeStyle="red"):(i.fillStyle="white",i.strokeStyle="black"),i.lineWidth=2*this.scale,i.beginPath(),i.arc(this.xTransform(n.x),this.yTransform(n.y),30*this.scale,0,2*Math.PI),i.fill(),i.stroke(),i.closePath(),i.beginPath(),o&&(i.arc(this.xTransform(n.x),this.yTransform(n.y),25*this.scale,0,2*Math.PI),i.stroke()),i.closePath(),i.fillStyle="black",i.font=`${Math.round(16*this.scale)}px Arial`,i.textAlign="center",i.textBaseline="middle",i.fillText(s,this.xTransform(n.x),this.yTransform(n.y))}}},142:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PQARun=void 0;class i{constructor(t,e){this.mostRecentlyAddedElement=null,this.mostRecentlyRemovedElement=null,this.maxPriority=-1/0,this.queue=new Map,this.state=t.initialState,this.automaton=t,this.word=e}updateMaxPriority(){this.maxPriority=Math.max(...this.queue.keys())}tryRemoveElement(t){if(t.priority<this.maxPriority)return!1;let e=this.queue.get(t.priority);if(void 0===e)return!1;let i=e.get(t.symbol);return void 0!==i&&0!==i&&(e.set(t.symbol,i-1),1===i&&this.updateMaxPriority(),this.mostRecentlyRemovedElement=t,!0)}canRemoveElement(t){if(t.priority<this.maxPriority)return!1;let e=this.queue.get(t.priority);if(void 0===e)return!1;let i=e.get(t.symbol);return!(void 0===i||0===i)}addElement(t){let e=this.queue.get(t.priority);void 0===e&&(e=new Map,this.queue.set(t.priority,e));let i=e.get(t.symbol);void 0===i&&(i=0),t.priority>this.maxPriority&&(this.maxPriority=t.priority),e.set(t.symbol,i+1),this.mostRecentlyAddedElement=t}tryRunTransition(t){if(this.mostRecentlyRemovedElement=null,this.mostRecentlyAddedElement=null,t>=this.automaton.transitionCount||t<0)return!1;let e=this.automaton.transitions[t];return e.stateFrom!==this.state?(console.warn(`From state ${e.stateFrom} is not ${this.state}`),!1):null!==e.input&&this.word.length>0&&e.input!=this.word[this.word.length-1]||null!==e.input&&0===this.word.length?(console.warn(`Input ${e.input} does not match symbol ${this.word[this.word.length-1]}`),!1):null===e.queueOut||this.tryRemoveElement(e.queueOut)?(null!==e.input&&this.word.pop(),this.state=e.stateTo,null!==e.queueIn&&this.addElement(e.queueIn),!0):(console.warn(`Unable to remove element ${e.queueOut} from queue`),!1)}canRunTransition(t){if(t>=this.automaton.transitionCount||t<0)return!1;let e=this.automaton.transitions[t];return!(e.stateFrom!==this.state||null!==e.input&&this.word.length>0&&e.input!=this.word[this.word.length-1]||null!==e.input&&0===this.word.length||null!==e.queueOut&&!this.canRemoveElement(e.queueOut))}canAccept(){return 0===this.word.length&&this.automaton.acceptingStates.has(this.state)}getMostRecentlyAddedElement(){return this.mostRecentlyAddedElement}getMostRecentlyRemovedElement(){return this.mostRecentlyRemovedElement}}e.PQARun=class{generateTransitions(t){let e=[];for(let i of t){let t,s,n,o,a;if(null===i.input)t=null;else{let e=this.inputLookup.get(i.input);if(void 0===e)throw new Error(`Input ${i.input} not found in input alphabet`);t=e}if(null===i.queueIn)s=null;else{let t=this.queueLookup.get(i.queueIn.symbol);if(void 0===t)throw new Error(`Queue symbol ${i.queueIn.symbol} not found in input alphabet`);s={symbol:t,priority:i.queueIn.priority}}if(null===i.queueOut)n=null;else{let t=this.queueLookup.get(i.queueOut.symbol);if(void 0===t)throw new Error(`Queue symbol ${i.queueOut.symbol} not found in input alphabet`);n={symbol:t,priority:i.queueOut.priority}}let l=this.stateLookup.get(i.stateFrom);if(void 0===l)throw new Error(`State ${i.stateFrom} not found in states`);o=l;let r=this.stateLookup.get(i.stateTo);if(void 0===r)throw new Error(`State ${i.stateTo} not found in states`);a=r,e.push({stateFrom:o,stateTo:a,input:t,queueIn:s,queueOut:n})}return e}constructor(t,e,s,n,o,a,l,r=null){this.originData=null,this.states=t,this.inputSymbols=e,this.queueSymbols=s,this.originData=r,this.stateLookup=new Map;for(let e=0;e<t.length;e++)this.stateLookup.set(t[e],e);this.inputLookup=new Map;for(let t=0;t<e.length;t++)this.inputLookup.set(e[t],t);this.queueLookup=new Map;for(let t=0;t<s.length;t++)this.queueLookup.set(s[t],t);if(!this.stateLookup.has(n))throw new Error(`Initial state ${n} not found in states`);let u=new Set;for(let t of o){let e=this.stateLookup.get(t);if(void 0===e)throw new Error(`Accepting state ${t} not found in states`);u.add(e)}let h=this.generateTransitions(a),d={stateCount:t.length,inputAlphabetCount:e.length,queueAlphabetCount:s.length,initialState:this.stateLookup.get(n),acceptingStates:u,transitionCount:a.length,transitions:h},p=[];for(let t of l){let e=this.inputLookup.get(t);if(void 0===e)throw new Error(`Input ${t} not found in input alphabet`);p.push(e)}this.runState=new i(d,p.reverse())}*transitions(){for(let t=0;t<this.runState.automaton.transitionCount;t++){let e,i,s,n=this.runState.automaton.transitions[t];e=null===n.input?null:this.inputSymbols[n.input],i=null===n.queueIn?null:{symbol:this.queueSymbols[n.queueIn.symbol],priority:n.queueIn.priority},s=null===n.queueOut?null:{symbol:this.queueSymbols[n.queueOut.symbol],priority:n.queueOut.priority};let o=this.states[n.stateFrom],a=this.states[n.stateTo];yield{index:t,value:{stateFrom:o,stateTo:a,input:e,queueIn:i,queueOut:s}}}}get state(){return this.states[this.runState.state]}get word(){let t=[];for(let e of this.runState.word)t.push(this.inputSymbols[e]);return t.reverse()}*queue(){for(let[t,e]of this.runState.queue)for(let[i,s]of e)yield{symbol:this.queueSymbols[i],priority:t,count:s}}tryTransition(t){return this.runState.tryRunTransition(t)}canRunTransition(t){return this.runState.canRunTransition(t)}tryTransitionRun(t){for(let e of t)if(!this.tryTransition(e))return!1;return!0}canAccept(){return this.runState.canAccept()}getMostRecentlyAddedElement(){let t=this.runState.getMostRecentlyAddedElement();if(null===t)return null;let{symbol:e,priority:i}=t;return{symbol:this.queueSymbols[e],priority:i}}getMostRecentlyRemovedElement(){let t=this.runState.getMostRecentlyRemovedElement();if(null===t)return null;let{symbol:e,priority:i}=t;return{symbol:this.queueSymbols[e],priority:i}}}},186:(t,e,i)=>{t.exports=i.p+"assets/442198056ecd5d762369-levels.json"},442:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameUI=void 0;const n=i(468),o=i(36),a=s(i(944)),l=s(i(635)),r=s(i(851));e.GameUI=class{constructor(t){var e;this.data=null,this.queueHidden=!1,this.buttonClickSound=new Audio(a.default),this.resetSound=new Audio(l.default),this.acceptSound=new Audio(r.default),this.stateCanvas=document.getElementById("states"),this.queueTable=document.getElementById("queue"),this.hitRegionCanvas=document.getElementById("stateHitRegion"),this.wordParagraph=document.getElementById("word"),this.previousButton=document.getElementById("prev"),this.nextButton=document.getElementById("next"),this.levelTitle=document.getElementById("level_name"),this.levelGroupList=document.getElementById("levels"),this.levelDescription=document.getElementById("level_description"),this.welcomeBeginButton=document.getElementById("welcome_begin_button"),this.levelGroups=new Map,this.queueTableFields=new Map,this.game=t,this.stateDiagram=new o.StateDiagram,this.stateDiagram.clearCanvas(),null===(e=document.getElementById("game_start"))||void 0===e||e.showModal()}setPQA(t){if(null===t.originData)throw new Error("PQA has no origin data, unable to construct UI");let e=t.originData;this.data=e,this.setQueueTable(e),this.updatePriorityQueue(t.queue()),this.updateWord(t.word),this.setActiveState(t.state)}getTransitionIdx(t){let e=t.offsetX,i=t.offsetY,s=this.hitRegionCanvas.getContext("2d").getImageData(e,i,1,1).data;return 256*s[0]*256+256*s[1]+s[2]}onStateHover(t,e){let i=t.offsetX,s=t.offsetY;this.hitRegionCanvas.getContext("2d").getImageData(i,s,1,1).data[0]<96?e.canRunTransition(this.getTransitionIdx(t))?this.stateCanvas.style.cursor="pointer":this.stateCanvas.style.cursor="not-allowed":this.stateCanvas.style.cursor="default"}setQueueTable(t){if(t.queueHidden)return this.queueTable.hidden=!0,this.queueHidden=!0,void this.stateDiagram.setQueueHidden(!0);this.queueTable.hidden=!1,this.queueHidden=!1,this.stateDiagram.setQueueHidden(!1),this.queueTable.innerHTML="",this.setQueueTableHead(t),this.setQueueTableBody(t)}setQueueTableHead(t){let e=this.queueTable.createTHead().insertRow();e.insertCell().outerHTML="<th>Priorities</th>";for(let i of t.queueAlphabet){let t=e.insertCell();t.outerHTML=`<th>${i}</th>`,t.scope="col"}}setQueueTableBody(t){let e=this.queueTable.createTBody();for(let i of t.priorities){let s=e.insertRow(),n=s.insertCell();n.outerHTML=`<th>${i}</th>`,n.scope="row";for(let e of t.queueAlphabet){let t=s.insertCell();this.queueTableFields.set([e,i].toString(),t)}}}updatePriorityQueue(t){if(!this.queueTable.hidden)for(let{symbol:e,priority:i,count:s}of t)this.queueTableFields.get([e,i].toString()).innerText=0===s?"":s.toString()}showError(t){console.error(t)}setActiveState(t){this.stateDiagram.update(this.data,t)}updateWord(t){this.wordParagraph.innerText=t.join(" ")}createInProjectile(t){let e=this.game.getMostRecentlyAddedElement();if(null===e)return;let i=document.createElement("div");i.classList.add("projectile","red");let s=this.queueTableFields.get([e.symbol,e.priority].toString());s.innerText=(parseInt(s.innerText)-1).toString();let n=s.getBoundingClientRect();document.body.prepend(i),console.log(t.x,t.y,n.x,n.y),i.animate([{transform:`translate(${t.x}px, ${t.y}px)`},{transform:`translate(${n.x+.5*n.width}px, ${n.y+.5*n.height}px)`}],{duration:200}),setTimeout(()=>{s.innerText=(1+parseInt(s.innerText)).toString(),i.style.transform=`translate(${n.x+.5*n.width}px, ${n.y+.5*n.height}px)`},200),setTimeout(()=>{i.remove()},300)}createOutProjectile(t){let e=this.game.getMostRecentlyRemovedElement();if(null===e)return;let i=document.createElement("div");i.classList.add("projectile","red");let s=this.queueTableFields.get([e.symbol,e.priority].toString()).getBoundingClientRect();document.body.prepend(i),console.log(t.x,t.y,s.x,s.y),i.animate([{transform:`translate(${s.x+.5*s.width}px, ${s.y+.5*s.height}px)`},{transform:`translate(${t.x}px, ${t.y}px)`}],{duration:200}),setTimeout(()=>{i.style.transform=`translate(${t.x}px, ${t.y}px)`},200),setTimeout(()=>{i.remove()},300)}onTransitionClicked(t){this.buttonClickSound.play(),this.createInProjectile(t),this.createOutProjectile(t)}onReset(){this.resetSound.play()}onAccept(){this.acceptSound.play(),document.getElementById("accepted").showModal()}addLevel(t,e,i){if(!this.levelGroups.has(e)){let t=document.createElement("li"),i=document.createElement("h2");i.innerText=e,t.appendChild(i);let s=document.createElement("ol");t.appendChild(s),this.levelGroupList.appendChild(t),this.levelGroups.set(e,s)}let s=this.levelGroups.get(e),o=document.createElement("li"),a=document.createElement("button");a.innerText=t,a.onclick=()=>{var t;null===(t=n.Game.instance)||void 0===t||t.onLevelSelect(i)},o.appendChild(a),s.appendChild(o)}setPrevNext(t,e){null===t?(this.previousButton.disabled=!0,this.previousButton.value=""):(this.previousButton.disabled=!1,this.previousButton.value=t),null===e?(this.nextButton.disabled=!0,this.nextButton.value=""):(this.nextButton.disabled=!1,this.nextButton.value=e)}setLevelName(t){this.levelTitle.innerText=t}setLevelDescription(t){this.levelDescription.innerHTML=t}setFirstLevel(t){this.welcomeBeginButton.onclick=()=>{var e;null===(e=n.Game.instance)||void 0===e||e.onLevelSelect(t)},this.game.onLevelSelect(t)}}},468:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Game=void 0;const s=i(442),n=i(582);class o{constructor(){this.ui=new s.GameUI(this),this.levelData=new n.LevelData(this.ui),this.pqa=null,o.instance=this}loadPQA(t){this.pqa=t.createPQA(),this.ui.setPQA(this.pqa)}onStateHover(t){this.ui.onStateHover(t,this)}onStateClicked(t){var e;let i=this.ui.getTransitionIdx(t);i>=6291456||(this.tryRunTransition(i)&&this.ui.onTransitionClicked(t),this.onStateHover(t),(null===(e=this.pqa)||void 0===e?void 0:e.canAccept())&&this.ui.onAccept())}tryRunTransition(t){let e;if(null===this.pqa)return this.ui.showError("No PQA loaded"),!1;e=this.pqa;let i=e.tryTransition(t);return i||this.ui.showError("Unable to run transition"),this.ui.setActiveState(e.state),this.ui.updatePriorityQueue(e.queue()),this.ui.updateWord(e.word),i}canRunTransition(t){let e;return null!==this.pqa&&(e=this.pqa,e.canRunTransition(t))}resetCurrentPQA(){var t;let e=null===(t=this.pqa)||void 0===t?void 0:t.originData;null!=e&&this.loadPQA(e),this.ui.onReset()}getMostRecentlyAddedElement(){return null===this.pqa?null:this.pqa.getMostRecentlyAddedElement()}getMostRecentlyRemovedElement(){return null===this.pqa?null:this.pqa.getMostRecentlyRemovedElement()}onLevelSelect(t){if(""===t)return;let e=this.levelData.getLevelData(t),i=this.levelData.getPrevious(t),s=this.levelData.getNext(t),n=this.levelData.getName(t),o=this.levelData.getLevelDescription(t);this.ui.setPrevNext(i,s),this.ui.setLevelName(n),this.ui.setLevelDescription(o),this.loadPQA(e)}}e.Game=o,o.instance=null},574:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PQAData=void 0;const s=i(142);e.PQAData=class{constructor(t){var e;let i;i="string"==typeof t?JSON.parse(t):t,this.states=new Map;for(let t of i.states)this.states.set(t.name,{position:{x:t.position.x,y:t.position.y},isAccepting:t.isAccepting});this.inputAlphabet=new Set;for(let t of i.inputAlphabet)this.inputAlphabet.add(t);this.queueAlphabet=new Set;for(let t of i.queueAlphabet)this.queueAlphabet.add(t);this.transitions=[];for(let t of i.transitions){let e=t.stateFrom,i=t.stateTo;if(!this.states.has(e))throw new Error(`State ${e} not found in states`);if(!this.states.has(i))throw new Error(`State ${i} not found in states`);let s=t.input;if(null!==s&&!this.inputAlphabet.has(s))throw new Error(`Input Symbol ${s} is not valid`);let n=t.queueIn,o=t.queueOut;if(null!==n&&!this.queueAlphabet.has(n.symbol))throw new Error(`Queue Symbol ${n.symbol} is not valid`);if(null!==o&&!this.queueAlphabet.has(o.symbol))throw new Error(`Queue Symbol ${o.symbol} is not valid`);let a=[];for(let{x:e,y:i}of t.path)a.push({x:e,y:i});let l={x:t.labelPosition.x,y:t.labelPosition.y};this.transitions.push({transition:{stateFrom:e,stateTo:i,input:s,queueIn:n,queueOut:o},path:a,labelPosition:l})}if(!this.states.has(i.initialState))throw new Error(`Initial state ${i.initialState} not found in states`);this.initialState=i.initialState,this.word=i.word,this.priorities=[];for(let t of i.priorities)this.priorities.push(t);this.queueHidden=null!==(e=i.hideQueue)&&void 0!==e&&e}createPQA(){let t=[],e=new Set;for(let[i,{isAccepting:s}]of this.states)s&&e.add(i),t.push(i);let i=Array.from(this.inputAlphabet),n=Array.from(this.queueAlphabet),o=this.initialState,a=[];for(let{transition:t}of this.transitions)a.push(t);return new s.PQARun(t,i,n,o,e,a,this.word,this)}}},582:function(t,e,i){var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))(function(n,o){function a(t){try{r(s.next(t))}catch(t){o(t)}}function l(t){try{r(s.throw(t))}catch(t){o(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i(function(t){t(e)})).then(a,l)}r((s=s.apply(t,e||[])).next())})},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.LevelData=void 0;const o=i(574),a=n(i(186));e.LevelData=class{constructor(t){this.firstLevel=null,this.groups=new Map,this.levels=new Map,this.ui=t,this.loadLevels().then(()=>{})}loadLevels(){return s(this,void 0,void 0,function*(){var t,e,i;let{groups:s,levels:n}=yield window.fetch(a.default).then(t=>t.text()).then(t=>JSON.parse(t));for(let e of n){let i=e,s=new o.PQAData(i),n=i.metadata.name.toString(),a=i.metadata.group.toString(),l=i.metadata.id.toString(),r=null!==(t=i.metadata.description)&&void 0!==t?t:"";this.groups.has(a)||this.groups.set(a,[]);let u=i.metadata.groupIndex;this.groups.get(a)[u]=l,this.levels.set(l,{data:s,group:a,name:n,prev:null,next:null,description:r})}for(let[t,e]of this.groups){let i=e.filter(t=>void 0!==t);this.groups.set(t,i)}s.length>0&&(this.firstLevel=null!==(i=null===(e=this.groups.get(s[0]))||void 0===e?void 0:e[0])&&void 0!==i?i:null),null!==this.firstLevel&&this.ui.setFirstLevel(this.firstLevel);let l=null,r=null;for(let t of s){let e=this.groups.get(t);if(void 0!==e)for(let t of e)void 0!==t&&(null!==r&&(this.levels.get(r).next=t,this.levels.get(r).prev=l),l=r,r=t)}null!==r&&(this.levels.get(r).next=null,this.levels.get(r).prev=l);for(let t of s){let e=this.groups.get(t);if(void 0!==e)for(let t of e){if(void 0===t)continue;let{group:e,name:i}=this.levels.get(t);this.ui.addLevel(i,e,t)}}})}getLevelData(t){return this.levels.get(t).data}getPrevious(t){return this.levels.get(t).prev}getNext(t){return this.levels.get(t).next}getName(t){return this.levels.get(t).name}getLevelDescription(t){return this.levels.get(t).description}}},635:(t,e,i)=>{t.exports=i.p+"assets/d06d771a9dc497567ad7-54405__korgms2000b__button-click.wav"},851:(t,e,i)=>{t.exports=i.p+"assets/2aca5f35d51e7fefb3e2-66136__aji__ding30603-spedup.wav"},914:(t,e,i)=>{i.r(e)},944:(t,e,i)=>{t.exports=i.p+"assets/b991bc8c7c11af001edf-219069__annabloom__click1.wav"}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");if(s.length)for(var n=s.length-1;n>-1&&(!t||!/^http(s?):/.test(t));)t=s[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{const t=i(468);var e,s;i(914),new t.Game,null===(e=document.getElementById("states"))||void 0===e||e.addEventListener("click",e=>{var i;null===(i=t.Game.instance)||void 0===i||i.onStateClicked(e)}),null===(s=document.getElementById("states"))||void 0===s||s.addEventListener("mousemove",e=>{var i;null===(i=t.Game.instance)||void 0===i||i.onStateHover(e)}),window.Game=t.Game})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,