(()=>{"use strict";var t={36:(t,e)=>{function i(t){return`#${t.toString(16).padStart(6,"0")}`}Object.defineProperty(e,"__esModule",{value:!0}),e.StateDiagram=void 0,e.StateDiagram=class{constructor(){this.queueHidden=!1,this.scale=1,this.lastUpdateInfo=null,this.stateCanvas=document.getElementById("states"),this.hitRegionCanvas=document.getElementById("stateHitRegion"),this.updateScale(),window.onresize=()=>{this.update(null,null)}}updateScale(){this.scale=(this.stateCanvas.getBoundingClientRect().width-4)/700,this.stateCanvas.width=700*this.scale,this.stateCanvas.height=500*this.scale,this.stateCanvas.style.height=500/700*(this.stateCanvas.getBoundingClientRect().width-4)+"px",this.hitRegionCanvas.height=500*this.scale,this.hitRegionCanvas.width=700*this.scale}update(t,e){if(this.updateScale(),null===t||null===e){if(null===this.lastUpdateInfo)return;t=this.lastUpdateInfo.data,e=this.lastUpdateInfo.activeState}this.clearCanvas(),this.drawTransitions(t),this.drawStates(e,t),this.lastUpdateInfo={data:t,activeState:e}}xTransform(t){return t*this.scale}yTransform(t){return t*this.scale}setQueueHidden(t){this.queueHidden=t}clearCanvas(){let t=this.stateCanvas.getContext("2d"),e=this.hitRegionCanvas.getContext("2d");t.clearRect(0,0,this.stateCanvas.width,this.stateCanvas.height),e.clearRect(0,0,this.hitRegionCanvas.width,this.hitRegionCanvas.height),t.fillStyle="white",e.fillStyle="white",t.fillRect(0,0,this.stateCanvas.width,this.stateCanvas.height),e.fillRect(0,0,this.hitRegionCanvas.width,this.hitRegionCanvas.height)}canvas_arrow(t,e,i,s,n){e=this.xTransform(e),i=this.yTransform(i),s=this.xTransform(s),n=this.yTransform(n);let l=10*this.scale,o=s-e,a=n-i,r=Math.atan2(a,o);t.beginPath(),t.moveTo(e,i),t.lineTo(s,n),t.lineTo(s-l*Math.cos(r-Math.PI/6),n-l*Math.sin(r-Math.PI/6)),t.moveTo(s,n),t.lineTo(s-l*Math.cos(r+Math.PI/6),n-l*Math.sin(r+Math.PI/6)),t.stroke(),t.closePath()}displayTransition(t){let e="";return null===t.input?e+="ε":e+=t.input,this.queueHidden||(e+=" : ",null===t.queueOut?e+="∅":e+=`(${t.queueOut.symbol}, ${t.queueOut.priority})`,e+=" ↦ ",null===t.queueIn?e+="∅":e+=`(${t.queueIn.symbol}, ${t.queueIn.priority})`),e}drawTransitions(t){let e=this.stateCanvas.getContext("2d"),s=this.hitRegionCanvas.getContext("2d"),n=0;e.strokeStyle="black";for(let{transition:l,path:o,labelPosition:a}of t.transitions){e.lineWidth=6*this.scale,e.beginPath();for(let{x:t,y:i}of o)e.lineTo(this.xTransform(t),this.yTransform(i));e.stroke(),e.closePath(),this.canvas_arrow(e,o[o.length-2].x,o[o.length-2].y,o[o.length-1].x,o[o.length-1].y),e.fillStyle="black",e.font=`${Math.round(16*this.scale)}px Arial`,e.textAlign="left",e.textBaseline="middle",e.fillText(this.displayTransition(l),this.xTransform(a.x),this.yTransform(a.y)),s.lineWidth=25*this.scale,s.strokeStyle=i(n),s.beginPath();for(let{x:t,y:e}of o)s.lineTo(this.xTransform(t),this.yTransform(e));s.stroke(),s.closePath(),n+=1}}drawStates(t,e){let i=this.stateCanvas.getContext("2d");for(let[s,{position:n,isAccepting:l}]of e.states)s===t?(i.fillStyle="yellow",i.strokeStyle="red"):(i.fillStyle="white",i.strokeStyle="black"),i.lineWidth=2*this.scale,i.beginPath(),i.arc(this.xTransform(n.x),this.yTransform(n.y),30*this.scale,0,2*Math.PI),i.fill(),i.stroke(),i.closePath(),i.beginPath(),l&&(i.arc(this.xTransform(n.x),this.yTransform(n.y),25*this.scale,0,2*Math.PI),i.stroke()),i.closePath(),i.fillStyle="black",i.font=`${Math.round(16*this.scale)}px Arial`,i.textAlign="center",i.textBaseline="middle",i.fillText(s,this.xTransform(n.x),this.yTransform(n.y))}}},142:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PQARun=void 0;class i{constructor(t,e){this.mostRecentlyAddedElement=null,this.mostRecentlyRemovedElement=null,this.maxPriority=-1/0,this.queue=new Map,this.state=t.initialState,this.automaton=t,this.word=e}updateMaxPriority(){this.maxPriority=Math.max(...this.queue.keys())}tryRemoveElement(t){if(t.priority<this.maxPriority)return!1;let e=this.queue.get(t.priority);if(void 0===e)return!1;let i=e.get(t.symbol);return void 0!==i&&0!==i&&(e.set(t.symbol,i-1),1===i&&this.updateMaxPriority(),this.mostRecentlyRemovedElement=t,!0)}canRemoveElement(t){if(t.priority<this.maxPriority)return!1;let e=this.queue.get(t.priority);if(void 0===e)return!1;let i=e.get(t.symbol);return!(void 0===i||0===i)}addElement(t){let e=this.queue.get(t.priority);void 0===e&&(e=new Map,this.queue.set(t.priority,e));let i=e.get(t.symbol);void 0===i&&(i=0),t.priority>this.maxPriority&&(this.maxPriority=t.priority),e.set(t.symbol,i+1),this.mostRecentlyAddedElement=t}tryRunTransition(t){if(this.mostRecentlyRemovedElement=null,this.mostRecentlyAddedElement=null,t>=this.automaton.transitionCount||t<0)return!1;let e=this.automaton.transitions[t];return e.stateFrom!==this.state?(console.warn(`From state ${e.stateFrom} is not ${this.state}`),!1):null!==e.input&&this.word.length>0&&e.input!=this.word[this.word.length-1]||null!==e.input&&0===this.word.length?(console.warn(`Input ${e.input} does not match symbol ${this.word[this.word.length-1]}`),!1):null===e.queueOut||this.tryRemoveElement(e.queueOut)?(null!==e.input&&this.word.pop(),this.state=e.stateTo,null!==e.queueIn&&this.addElement(e.queueIn),!0):(console.warn(`Unable to remove element ${e.queueOut} from queue`),!1)}canRunTransition(t){if(t>=this.automaton.transitionCount||t<0)return!1;let e=this.automaton.transitions[t];return!(e.stateFrom!==this.state||null!==e.input&&this.word.length>0&&e.input!=this.word[this.word.length-1]||null!==e.input&&0===this.word.length||null!==e.queueOut&&!this.canRemoveElement(e.queueOut))}canAccept(){return 0===this.word.length&&this.automaton.acceptingStates.has(this.state)}getMostRecentlyAddedElement(){return this.mostRecentlyAddedElement}getMostRecentlyRemovedElement(){return this.mostRecentlyRemovedElement}}e.PQARun=class{generateTransitions(t){let e=[];for(let i of t){let t,s,n,l,o;if(null===i.input)t=null;else{let e=this.inputLookup.get(i.input);if(void 0===e)throw new Error(`Input ${i.input} not found in input alphabet`);t=e}if(null===i.queueIn)s=null;else{let t=this.queueLookup.get(i.queueIn.symbol);if(void 0===t)throw new Error(`Queue symbol ${i.queueIn.symbol} not found in input alphabet`);s={symbol:t,priority:i.queueIn.priority}}if(null===i.queueOut)n=null;else{let t=this.queueLookup.get(i.queueOut.symbol);if(void 0===t)throw new Error(`Queue symbol ${i.queueOut.symbol} not found in input alphabet`);n={symbol:t,priority:i.queueOut.priority}}let a=this.stateLookup.get(i.stateFrom);if(void 0===a)throw new Error(`State ${i.stateFrom} not found in states`);l=a;let r=this.stateLookup.get(i.stateTo);if(void 0===r)throw new Error(`State ${i.stateTo} not found in states`);o=r,e.push({stateFrom:l,stateTo:o,input:t,queueIn:s,queueOut:n})}return e}constructor(t,e,s,n,l,o,a,r=null){this.originData=null,this.states=t,this.inputSymbols=e,this.queueSymbols=s,this.originData=r,this.stateLookup=new Map;for(let e=0;e<t.length;e++)this.stateLookup.set(t[e],e);this.inputLookup=new Map;for(let t=0;t<e.length;t++)this.inputLookup.set(e[t],t);this.queueLookup=new Map;for(let t=0;t<s.length;t++)this.queueLookup.set(s[t],t);if(!this.stateLookup.has(n))throw new Error(`Initial state ${n} not found in states`);let u=new Set;for(let t of l){let e=this.stateLookup.get(t);if(void 0===e)throw new Error(`Accepting state ${t} not found in states`);u.add(e)}let h=this.generateTransitions(o),d={stateCount:t.length,inputAlphabetCount:e.length,queueAlphabetCount:s.length,initialState:this.stateLookup.get(n),acceptingStates:u,transitionCount:o.length,transitions:h},c=[];for(let t of a){let e=this.inputLookup.get(t);if(void 0===e)throw new Error(`Input ${t} not found in input alphabet`);c.push(e)}this.runState=new i(d,c.reverse())}*transitions(){for(let t=0;t<this.runState.automaton.transitionCount;t++){let e,i,s,n=this.runState.automaton.transitions[t];e=null===n.input?null:this.inputSymbols[n.input],i=null===n.queueIn?null:{symbol:this.queueSymbols[n.queueIn.symbol],priority:n.queueIn.priority},s=null===n.queueOut?null:{symbol:this.queueSymbols[n.queueOut.symbol],priority:n.queueOut.priority};let l=this.states[n.stateFrom],o=this.states[n.stateTo];yield{index:t,value:{stateFrom:l,stateTo:o,input:e,queueIn:i,queueOut:s}}}}get state(){return this.states[this.runState.state]}get word(){let t=[];for(let e of this.runState.word)t.push(this.inputSymbols[e]);return t.reverse()}*queue(){for(let[t,e]of this.runState.queue)for(let[i,s]of e)yield{symbol:this.queueSymbols[i],priority:t,count:s}}tryTransition(t){return this.runState.tryRunTransition(t)}canRunTransition(t){return this.runState.canRunTransition(t)}tryTransitionRun(t){for(let e of t)if(!this.tryTransition(e))return!1;return!0}canAccept(){return this.runState.canAccept()}getMostRecentlyAddedElement(){let t=this.runState.getMostRecentlyAddedElement();if(null===t)return null;let{symbol:e,priority:i}=t;return{symbol:this.queueSymbols[e],priority:i}}getMostRecentlyRemovedElement(){let t=this.runState.getMostRecentlyRemovedElement();if(null===t)return null;let{symbol:e,priority:i}=t;return{symbol:this.queueSymbols[e],priority:i}}}},156:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(468);i(914);const l=s(i(407));!function(){var t,e,i;new n.Game,null===(t=document.getElementById("states"))||void 0===t||t.addEventListener("click",t=>{var e;null===(e=n.Game.instance)||void 0===e||e.onStateClicked(t)}),null===(e=document.getElementById("states"))||void 0===e||e.addEventListener("mousemove",t=>{var e;null===(e=n.Game.instance)||void 0===e||e.onStateHover(t)});let s=new Image;s.src=l.default,null===(i=document.getElementById("github-icon"))||void 0===i||i.appendChild(s)}(),window.Game=n.Game},186:(t,e,i)=>{t.exports=i.p+"assets/217bdc2efb3fca05607c-levels.json"},407:(t,e,i)=>{t.exports=i.p+"assets/6fa18895f6e6c7772cab-github-mark.svg"},442:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameUI=void 0;const n=i(468),l=i(36),o=s(i(944)),a=s(i(635)),r=s(i(851));e.GameUI=class{constructor(t){var e;this.data=null,this.queueHidden=!1,this.buttonClickSound=new Audio(o.default),this.resetSound=new Audio(a.default),this.acceptSound=new Audio(r.default),this.stateCanvas=document.getElementById("states"),this.queueTable=document.getElementById("queue"),this.hitRegionCanvas=document.getElementById("stateHitRegion"),this.wordParagraph=document.getElementById("word"),this.previousButton=document.getElementById("prev"),this.nextButton=document.getElementById("next"),this.levelTitle=document.getElementById("level_name"),this.levelGroupList=document.getElementById("levels"),this.levelDescription=document.getElementById("level_description"),this.welcomeBeginButton=document.getElementById("welcome_begin_button"),this.levelGroups=new Map,this.queueTableFields=new Map,this.levels=new Map,this.game=t,this.stateDiagram=new l.StateDiagram,this.stateDiagram.clearCanvas(),null===(e=document.getElementById("game_start"))||void 0===e||e.showModal()}setPQA(t){if(null===t.originData)throw new Error("PQA has no origin data, unable to construct UI");let e=t.originData;this.data=e,this.setQueueTable(e),this.updatePriorityQueue(t.queue()),this.updateWord(t.word),this.setActiveState(t.state)}getTransitionIdx(t){let e=t.offsetX,i=t.offsetY,s=this.hitRegionCanvas.getContext("2d").getImageData(e,i,1,1).data;return 256*s[0]*256+256*s[1]+s[2]}onStateHover(t,e){let i=t.offsetX,s=t.offsetY;this.hitRegionCanvas.getContext("2d").getImageData(i,s,1,1).data[0]<96?e.canRunTransition(this.getTransitionIdx(t))?this.stateCanvas.style.cursor="pointer":this.stateCanvas.style.cursor="not-allowed":this.stateCanvas.style.cursor="default"}setQueueTable(t){if(t.queueHidden)return this.queueTable.hidden=!0,this.queueHidden=!0,void this.stateDiagram.setQueueHidden(!0);this.queueTable.hidden=!1,this.queueHidden=!1,this.stateDiagram.setQueueHidden(!1),this.queueTable.innerHTML="",this.setQueueTableHead(t),this.setQueueTableBody(t)}setQueueTableHead(t){let e=this.queueTable.createTHead().insertRow();e.insertCell().outerHTML="<th>Priorities</th>";for(let i of t.queueAlphabet){let t=e.insertCell();t.outerHTML=`<th>${i}</th>`,t.scope="col"}}setQueueTableBody(t){let e=this.queueTable.createTBody();for(let i of t.priorities){let s=e.insertRow(),n=s.insertCell();n.outerHTML=`<th>${i}</th>`,n.scope="row";for(let e of t.queueAlphabet){let t=s.insertCell();this.queueTableFields.set([e,i].toString(),t)}}}updatePriorityQueue(t){if(!this.queueTable.hidden)for(let{symbol:e,priority:i,count:s}of t)this.queueTableFields.get([e,i].toString()).innerText=0===s?"":s.toString()}showError(t){console.error(t)}setActiveState(t){this.stateDiagram.update(this.data,t)}updateWord(t){this.wordParagraph.innerText=t.join(" ")}createInProjectile(t){let e=this.game.getMostRecentlyAddedElement();if(null===e)return;let i=document.createElement("div");i.classList.add("projectile","red");let s=this.queueTableFields.get([e.symbol,e.priority].toString());s.innerText=(parseInt(s.innerText)-1).toString();let n=s.getBoundingClientRect();document.body.prepend(i),console.log(t.x,t.y,n.x,n.y),i.animate([{transform:`translate(${t.x}px, ${t.y}px)`},{transform:`translate(${n.x+.5*n.width}px, ${n.y+.5*n.height}px)`}],{duration:200}),setTimeout(()=>{s.innerText=(1+parseInt(s.innerText)).toString(),i.style.transform=`translate(${n.x+.5*n.width}px, ${n.y+.5*n.height}px)`},200),setTimeout(()=>{i.remove()},300)}createOutProjectile(t){let e=this.game.getMostRecentlyRemovedElement();if(null===e)return;let i=document.createElement("div");i.classList.add("projectile","red");let s=this.queueTableFields.get([e.symbol,e.priority].toString()).getBoundingClientRect();document.body.prepend(i),console.log(t.x,t.y,s.x,s.y),i.animate([{transform:`translate(${s.x+.5*s.width}px, ${s.y+.5*s.height}px)`},{transform:`translate(${t.x}px, ${t.y}px)`}],{duration:200}),setTimeout(()=>{i.style.transform=`translate(${t.x}px, ${t.y}px)`},200),setTimeout(()=>{i.remove()},300)}onTransitionClicked(t){this.buttonClickSound.play(),this.createInProjectile(t),this.createOutProjectile(t)}onReset(){this.resetSound.play().then(()=>{})}onAccept(){this.acceptSound.play().then(()=>{}),document.getElementById("accepted").showModal()}addLevel(t,e,i){if(!this.levelGroups.has(e)){let t=document.createElement("li"),i=document.createElement("h2");i.innerText=e,t.appendChild(i);let s=document.createElement("ol");t.appendChild(s),this.levelGroupList.appendChild(t),this.levelGroups.set(e,s)}let s=this.levelGroups.get(e),l=document.createElement("li"),o=document.createElement("button");o.innerText=t,o.onclick=()=>{var t;null===(t=n.Game.instance)||void 0===t||t.onLevelSelect(i)},l.appendChild(o),this.levels.set(i,o),s.appendChild(l)}setPrevNext(t,e){null===t?(this.previousButton.disabled=!0,this.previousButton.value=""):(this.previousButton.disabled=!this.game.levelData.isLevelUnlocked(t),this.previousButton.value=t),null===e?(this.nextButton.disabled=!0,this.nextButton.value=""):(this.nextButton.disabled=!this.game.levelData.isLevelUnlocked(e),this.nextButton.value=e)}setLevelName(t){this.levelTitle.innerText=t}setLevelDescription(t){this.levelDescription.innerHTML=t}setFirstLevel(t){this.welcomeBeginButton.onclick=()=>{var e;null===(e=n.Game.instance)||void 0===e||e.onLevelSelect(t)},this.game.onLevelSelect(t)}setUnlockedLevels(t){for(let t of this.levels.values())t.disabled=!0;this.previousButton.disabled=!0,this.nextButton.disabled=!0;for(let e of t)this.previousButton.value===e&&(this.previousButton.disabled=!1),this.nextButton.value===e&&(this.nextButton.disabled=!1),this.levels.has(e)&&(this.levels.get(e).disabled=!1)}setCurrentLevel(t){for(let t of this.levels.values())t.classList.remove("current");this.levels.has(t)&&this.levels.get(t).classList.add("current")}}},468:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Game=void 0;const s=i(442),n=i(582);class l{constructor(){this.nextLevel=null,this.ui=new s.GameUI(this),this.levelData=new n.LevelData(this.ui),this.pqa=null,l.instance=this,this.hasAccepted=!1}loadPQA(t){this.pqa=t.createPQA(),this.hasAccepted=!1,this.ui.setPQA(this.pqa)}onStateHover(t){this.ui.onStateHover(t,this)}onStateClicked(t){var e;let i=this.ui.getTransitionIdx(t);i>=6291456||(this.tryRunTransition(i)&&this.ui.onTransitionClicked(t),this.onStateHover(t),(null===(e=this.pqa)||void 0===e?void 0:e.canAccept())&&!this.hasAccepted&&(this.ui.onAccept(),null!==this.nextLevel&&this.levelData.unlockLevel(this.nextLevel),this.hasAccepted=!0))}tryRunTransition(t){let e;if(null===this.pqa)return this.ui.showError("No PQA loaded"),!1;e=this.pqa;let i=e.tryTransition(t);return i||this.ui.showError("Unable to run transition"),this.ui.setActiveState(e.state),this.ui.updatePriorityQueue(e.queue()),this.ui.updateWord(e.word),i}canRunTransition(t){let e;return null!==this.pqa&&(e=this.pqa,e.canRunTransition(t))}resetCurrentPQA(){var t;let e=null===(t=this.pqa)||void 0===t?void 0:t.originData;null!=e&&this.loadPQA(e),this.ui.onReset()}getMostRecentlyAddedElement(){return null===this.pqa?null:this.pqa.getMostRecentlyAddedElement()}getMostRecentlyRemovedElement(){return null===this.pqa?null:this.pqa.getMostRecentlyRemovedElement()}onLevelSelect(t){if(""===t)return;let e=this.levelData.getLevelData(t),i=this.levelData.getPrevious(t),s=this.levelData.getNext(t),n=this.levelData.getName(t),l=this.levelData.getLevelDescription(t);this.ui.setPrevNext(i,s),this.nextLevel=s,this.ui.setLevelName(n),this.ui.setLevelDescription(l),this.ui.setCurrentLevel(t),this.loadPQA(e)}resetProgress(){localStorage.removeItem("unlockedLevels"),window.location.reload()}}e.Game=l,l.instance=null},574:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PQAData=void 0;const s=i(142);e.PQAData=class{constructor(t){var e;let i;i="string"==typeof t?JSON.parse(t):t,this.states=new Map;for(let t of i.states)this.states.set(t.name,{position:{x:t.position.x,y:t.position.y},isAccepting:t.isAccepting});this.inputAlphabet=new Set;for(let t of i.inputAlphabet)this.inputAlphabet.add(t);this.queueAlphabet=new Set;for(let t of i.queueAlphabet)this.queueAlphabet.add(t);this.transitions=[];for(let t of i.transitions){let e=t.stateFrom,i=t.stateTo;if(!this.states.has(e))throw new Error(`State ${e} not found in states`);if(!this.states.has(i))throw new Error(`State ${i} not found in states`);let s=t.input;if(null!==s&&!this.inputAlphabet.has(s))throw new Error(`Input Symbol ${s} is not valid`);let n=t.queueIn,l=t.queueOut;if(null!==n&&!this.queueAlphabet.has(n.symbol))throw new Error(`Queue Symbol ${n.symbol} is not valid`);if(null!==l&&!this.queueAlphabet.has(l.symbol))throw new Error(`Queue Symbol ${l.symbol} is not valid`);let o=this.createPath(t.path),a=this.createLabelPosition(t.labelPosition,o);this.transitions.push({transition:{stateFrom:e,stateTo:i,input:s,queueIn:n,queueOut:l},path:o,labelPosition:a})}if(!this.states.has(i.initialState))throw new Error(`Initial state ${i.initialState} not found in states`);this.initialState=i.initialState,this.word=i.word,this.priorities=[];for(let t of i.priorities)this.priorities.push(t);this.queueHidden=null!==(e=i.hideQueue)&&void 0!==e&&e}createLabelPosition(t,e){if(void 0===t.angle)return t;let i,s=(e[0].x+e[e.length-1].x)/2,n=(e[0].y+e[e.length-1].y)/2;if("number"==typeof t.angle)i=t.angle;else switch(t.angle){case"N":i=90;break;case"NE":i=45;break;case"E":i=0;break;case"SE":i=-45;break;case"S":i=-90;break;case"SW":i=-135;break;case"W":i=180;break;case"NW":i=135;break;default:throw new Error(`Invalid angle ${t.angle}`)}return i=-i/360*2*Math.PI,{x:s+20*Math.cos(i)-5,y:n+20*Math.sin(i)}}createPath(t){var e,i,s,n;let l=[];for(let s of t)if(void 0!==s.state){if(!this.states.has(s.state))throw new Error(`State ${s} not found in states`);l.push(null!==(i=null===(e=this.states.get(s.state))||void 0===e?void 0:e.position)&&void 0!==i?i:{x:0,y:0})}else l.push(s);if(t.length>1){let e,i=t[0];if(void 0!==i.state){let t=null!==(s=i.offset)&&void 0!==s?s:0,n=l[0],o=l[1],a=Math.sqrt((n.x-o.x)*(n.x-o.x)+(n.y-o.y)*(n.y-o.y)),r=(Math.sqrt(900-t*t)-2)/a;e={x:n.x+(n.y-o.y)*t/a+r*(o.x-n.x),y:n.y+(o.x-n.x)*t/a+r*(o.y-n.y)}}else e=l[0];let o,a=t[t.length-1];if(void 0!==a.state){let e=null!==(n=a.offset)&&void 0!==n?n:0,i=l[t.length-2],s=l[t.length-1],r=Math.sqrt((i.x-s.x)*(i.x-s.x)+(i.y-s.y)*(i.y-s.y)),u=1-(Math.sqrt(900-e*e)+2)/r;o={x:i.x+(i.y-s.y)*e/r+u*(s.x-i.x),y:i.y+(s.x-i.x)*e/r+u*(s.y-i.y)}}else o=l[t.length-1];l[0]=e,l[t.length-1]=o}return l}createPQA(){let t=[],e=new Set;for(let[i,{isAccepting:s}]of this.states)s&&e.add(i),t.push(i);let i=Array.from(this.inputAlphabet),n=Array.from(this.queueAlphabet),l=this.initialState,o=[];for(let{transition:t}of this.transitions)o.push(t);return new s.PQARun(t,i,n,l,e,o,this.word,this)}}},582:function(t,e,i){var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))(function(n,l){function o(t){try{r(s.next(t))}catch(t){l(t)}}function a(t){try{r(s.throw(t))}catch(t){l(t)}}function r(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i(function(t){t(e)})).then(o,a)}r((s=s.apply(t,e||[])).next())})},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.LevelData=void 0;const l=i(574),o=n(i(186));e.LevelData=class{constructor(t){var e;this.groups=new Map,this.levels=new Map,this.firstLevel=null,this.ui=t,this.unlockedLevels=new Set(JSON.parse(null!==(e=localStorage.getItem("unlockedLevels"))&&void 0!==e?e:"[]")),this.loadLevels().then(()=>{null!==this.firstLevel&&this.unlockLevel(this.firstLevel),this.ui.setUnlockedLevels(this.unlockedLevels)})}loadLevels(){return s(this,void 0,void 0,function*(){var t,e,i;let{groups:s,levels:n}=yield window.fetch(o.default).then(t=>t.text()).then(t=>JSON.parse(t));for(let e of n){let i=e,s=new l.PQAData(i),n=i.metadata.name.toString(),o=i.metadata.group.toString(),a=i.metadata.id.toString(),r=null!==(t=i.metadata.description)&&void 0!==t?t:"";this.groups.has(o)||this.groups.set(o,[]);let u=i.metadata.groupIndex;this.groups.get(o)[u]=a,this.levels.set(a,{data:s,group:o,name:n,prev:null,next:null,description:r})}for(let[t,e]of this.groups){let i=e.filter(t=>void 0!==t);this.groups.set(t,i)}s.length>0&&(this.firstLevel=null!==(i=null===(e=this.groups.get(s[0]))||void 0===e?void 0:e[0])&&void 0!==i?i:null),null!==this.firstLevel&&this.ui.setFirstLevel(this.firstLevel);let a=null,r=null;for(let t of s){let e=this.groups.get(t);if(void 0!==e)for(let t of e)void 0!==t&&(null!==r&&(this.levels.get(r).next=t,this.levels.get(r).prev=a),a=r,r=t)}null!==r&&(this.levels.get(r).next=null,this.levels.get(r).prev=a);for(let t of s){let e=this.groups.get(t);if(void 0!==e)for(let t of e){if(void 0===t)continue;let{group:e,name:i}=this.levels.get(t);this.ui.addLevel(i,e,t)}}})}getLevelData(t){return this.levels.get(t).data}getPrevious(t){return this.levels.get(t).prev}getNext(t){return this.levels.get(t).next}getName(t){return this.levels.get(t).name}getLevelDescription(t){return this.levels.get(t).description}unlockLevel(t){this.unlockedLevels.add(t);let e=Array.from(this.unlockedLevels);localStorage.setItem("unlockedLevels",JSON.stringify(e)),this.ui.setUnlockedLevels(this.unlockedLevels)}isLevelUnlocked(t){return this.unlockedLevels.has(t)}}},635:(t,e,i)=>{t.exports=i.p+"assets/d06d771a9dc497567ad7-54405__korgms2000b__button-click.wav"},851:(t,e,i)=>{t.exports=i.p+"assets/2aca5f35d51e7fefb3e2-66136__aji__ding30603-spedup.wav"},914:(t,e,i)=>{i.r(e)},944:(t,e,i)=>{t.exports=i.p+"assets/b991bc8c7c11af001edf-219069__annabloom__click1.wav"}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var l=e[s]={exports:{}};return t[s].call(l.exports,l,l.exports,i),l.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");if(s.length)for(var n=s.length-1;n>-1&&(!t||!/^http(s?):/.test(t));)t=s[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,