{"levels":[{"metadata":{"name":"Level 1","group":"NFA","groupIndex":0,"id":"level1","description":"<p>In the centre, there is the <strong>automaton</strong>. The automaton is made up of potential\n<strong>states</strong>, represented by circles, and <strong>transitions</strong> between those states, \nrepresented by arrows. The <strong>current</strong> state is the state in yellow, and the \n<strong>accepting</strong> states have double borders. </p>\n<p>For now, we will only deal with NFAs (Nondeterministic Finite Automata) \nwhich only have these states and transitions. However, later on we will \nintroduce PQAs which have a priority queue as well.</p>\n<p>The goal of this game is to make the automaton accept by making an accepting \nstate the current state.</p>\n<p>Try clicking on the transition to move the current state from <code>q0</code> to <code>q1</code>.</p>"},"states":[{"name":"q0","position":{"x":200,"y":250},"isAccepting":false},{"name":"q1","position":{"x":500,"y":250},"isAccepting":true}],"inputAlphabet":[],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":null,"queueIn":null,"queueOut":null,"path":[{"state":"q0"},{"state":"q1"}],"labelPosition":{"angle":"N"}}],"word":[],"hideQueue":true},{"metadata":{"name":"Level 10","group":"NFA","groupIndex":9,"id":"level10","description":"<p>For many automata, working with them can feel like solving a maze. This \nlevel consists of various \"gates\" which you have to pass in sequential order \nto accept <code>abc</code>. </p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">a + c + abc\n</code></pre>\n<p></details></p>"},"states":[{"name":"A0","position":{"x":100,"y":50},"isAccepting":false},{"name":"B0","position":{"x":200,"y":50},"isAccepting":false},{"name":"C0","position":{"x":300,"y":50},"isAccepting":false},{"name":"D0","position":{"x":400,"y":50},"isAccepting":false},{"name":"E0","position":{"x":500,"y":50},"isAccepting":false},{"name":"F0","position":{"x":600,"y":50},"isAccepting":false},{"name":"A1","position":{"x":100,"y":150},"isAccepting":false},{"name":"B1","position":{"x":200,"y":150},"isAccepting":false},{"name":"C1","position":{"x":300,"y":150},"isAccepting":false},{"name":"D1","position":{"x":400,"y":150},"isAccepting":false},{"name":"E1","position":{"x":500,"y":150},"isAccepting":false},{"name":"F1","position":{"x":600,"y":150},"isAccepting":false},{"name":"A2","position":{"x":100,"y":250},"isAccepting":false},{"name":"B2","position":{"x":200,"y":250},"isAccepting":false},{"name":"C2","position":{"x":300,"y":250},"isAccepting":false},{"name":"D2","position":{"x":400,"y":250},"isAccepting":false},{"name":"E2","position":{"x":500,"y":250},"isAccepting":false},{"name":"F2","position":{"x":600,"y":250},"isAccepting":false},{"name":"A3","position":{"x":100,"y":350},"isAccepting":false},{"name":"B3","position":{"x":200,"y":350},"isAccepting":false},{"name":"C3","position":{"x":300,"y":350},"isAccepting":false},{"name":"D3","position":{"x":400,"y":350},"isAccepting":false},{"name":"E3","position":{"x":500,"y":350},"isAccepting":false},{"name":"F3","position":{"x":600,"y":350},"isAccepting":true},{"name":"A4","position":{"x":100,"y":450},"isAccepting":true},{"name":"B4","position":{"x":200,"y":450},"isAccepting":false},{"name":"C4","position":{"x":300,"y":450},"isAccepting":false},{"name":"D4","position":{"x":400,"y":450},"isAccepting":false},{"name":"E4","position":{"x":500,"y":450},"isAccepting":false},{"name":"F4","position":{"x":600,"y":450},"isAccepting":false}],"inputAlphabet":["a","b","c"],"queueAlphabet":[],"priorities":[],"initialState":"A0","transitions":[{"stateFrom":"A0","stateTo":"B0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":128,"y":50},{"x":168,"y":50}],"labelPosition":{"x":145,"y":30}},{"stateFrom":"B0","stateTo":"C0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":228,"y":50},{"x":268,"y":50}],"labelPosition":{"x":245,"y":30}},{"stateFrom":"C0","stateTo":"D0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":328,"y":50},{"x":368,"y":50}],"labelPosition":{"x":345,"y":30}},{"stateFrom":"E0","stateTo":"F0","input":"c","queueIn":null,"queueOut":null,"path":[{"x":528,"y":50},{"x":568,"y":50}],"labelPosition":{"x":545,"y":30}},{"stateFrom":"A0","stateTo":"A1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":100,"y":78},{"x":100,"y":118}],"labelPosition":{"x":115,"y":100}},{"stateFrom":"C1","stateTo":"C0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":300,"y":122},{"x":300,"y":82}],"labelPosition":{"x":315,"y":100}},{"stateFrom":"E1","stateTo":"E0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":500,"y":122},{"x":500,"y":82}],"labelPosition":{"x":515,"y":100}},{"stateFrom":"F0","stateTo":"F1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":600,"y":78},{"x":600,"y":118}],"labelPosition":{"x":615,"y":100}},{"stateFrom":"A1","stateTo":"B1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":128,"y":150},{"x":168,"y":150}],"labelPosition":{"x":145,"y":130}},{"stateFrom":"D1","stateTo":"C1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":372,"y":150},{"x":332,"y":150}],"labelPosition":{"x":345,"y":130}},{"stateFrom":"D1","stateTo":"E1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":428,"y":150},{"x":468,"y":150}],"labelPosition":{"x":445,"y":130}},{"stateFrom":"B1","stateTo":"B2","input":"a","queueIn":null,"queueOut":null,"path":[{"x":200,"y":178},{"x":200,"y":218}],"labelPosition":{"x":215,"y":200}},{"stateFrom":"D2","stateTo":"D1","input":"b","queueIn":null,"queueOut":null,"path":[{"x":400,"y":222},{"x":400,"y":182}],"labelPosition":{"x":415,"y":200}},{"stateFrom":"F1","stateTo":"F2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":600,"y":178},{"x":600,"y":218}],"labelPosition":{"x":615,"y":200}},{"stateFrom":"B2","stateTo":"A2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":172,"y":250},{"x":132,"y":250}],"labelPosition":{"x":145,"y":230}},{"stateFrom":"B2","stateTo":"C2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":228,"y":250},{"x":268,"y":250}],"labelPosition":{"x":245,"y":230}},{"stateFrom":"D2","stateTo":"C2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":372,"y":250},{"x":332,"y":250}],"labelPosition":{"x":345,"y":230}},{"stateFrom":"F2","stateTo":"E2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":572,"y":250},{"x":532,"y":250}],"labelPosition":{"x":545,"y":230}},{"stateFrom":"A2","stateTo":"A3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":100,"y":278},{"x":100,"y":318}],"labelPosition":{"x":115,"y":300}},{"stateFrom":"B2","stateTo":"B3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":200,"y":278},{"x":200,"y":318}],"labelPosition":{"x":215,"y":300}},{"stateFrom":"C2","stateTo":"C3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":300,"y":278},{"x":300,"y":318}],"labelPosition":{"x":315,"y":300}},{"stateFrom":"D3","stateTo":"D2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":400,"y":322},{"x":400,"y":282}],"labelPosition":{"x":415,"y":300}},{"stateFrom":"E2","stateTo":"E3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":500,"y":278},{"x":500,"y":318}],"labelPosition":{"x":515,"y":300}},{"stateFrom":"B3","stateTo":"A3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":172,"y":350},{"x":132,"y":350}],"labelPosition":{"x":145,"y":330}},{"stateFrom":"A3","stateTo":"A4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":100,"y":378},{"x":100,"y":418}],"labelPosition":{"x":115,"y":400}},{"stateFrom":"B4","stateTo":"B3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":200,"y":422},{"x":200,"y":382}],"labelPosition":{"x":215,"y":400}},{"stateFrom":"C3","stateTo":"C4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":300,"y":378},{"x":300,"y":418}],"labelPosition":{"x":315,"y":400}},{"stateFrom":"D4","stateTo":"D3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":400,"y":422},{"x":400,"y":382}],"labelPosition":{"x":415,"y":400}},{"stateFrom":"E3","stateTo":"E4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":500,"y":378},{"x":500,"y":418}],"labelPosition":{"x":515,"y":400}},{"stateFrom":"F4","stateTo":"F3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":600,"y":422},{"x":600,"y":382}],"labelPosition":{"x":615,"y":400}},{"stateFrom":"C4","stateTo":"B4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":272,"y":450},{"x":232,"y":450}],"labelPosition":{"x":245,"y":430}},{"stateFrom":"C4","stateTo":"D4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":328,"y":450},{"x":368,"y":450}],"labelPosition":{"x":345,"y":430}},{"stateFrom":"E4","stateTo":"F4","input":null,"queueIn":null,"queueOut":null,"path":[{"x":528,"y":450},{"x":568,"y":450}],"labelPosition":{"x":545,"y":430}},{"stateFrom":"D0","stateTo":"E0","input":null,"queueIn":null,"queueOut":null,"path":[{"x":428,"y":50},{"x":468,"y":50}],"labelPosition":{"x":445,"y":30}}],"word":["a","b","c"],"hideQueue":true},{"metadata":{"name":"Level 2","group":"NFA","groupIndex":1,"id":"level2","description":"<p>Most automata read in a <strong>word</strong> (a sequence of symbols) from the input. \nWords are read from the front back. The word, in this case <code>ab</code>, can be \nfound below the automaton.</p>\n<p>Each transition reads in either nothing or a single symbol from the input. \nThe symbol <em>must</em> be at the front of the input for the transition to be able \nto be run. </p>\n<p>In this case, the transition from <code>q0</code> to <code>q1</code> reads in an <code>a</code> from the \ninput. Try clicking on that transition. </p>\n<p>As an additional challenge, try thinking about what possible words each \nautomaton can accept, called the <strong>language</strong> of the automaton. The answers \nwill be hidden at the bottom of the description under \"Language\".</p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts only the word <code>ab</code>.\n</details></p>"},"states":[{"name":"q0","position":{"x":200,"y":250},"isAccepting":false},{"name":"q1","position":{"x":350,"y":250},"isAccepting":false},{"name":"q2","position":{"x":500,"y":250},"isAccepting":true}],"inputAlphabet":["a","b"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":"a","queueIn":null,"queueOut":null,"path":[{"x":230,"y":250},{"x":318,"y":250}],"labelPosition":{"x":270,"y":235}},{"stateFrom":"q1","stateTo":"q2","input":"b","queueIn":null,"queueOut":null,"path":[{"x":370,"y":250},{"x":468,"y":250}],"labelPosition":{"x":420,"y":235}}],"word":["a","b"],"hideQueue":true},{"metadata":{"name":"Level 3","group":"NFA","groupIndex":2,"id":"level3","description":"<p>In many automata, there are multiple possible transitions out of a state.  In \nthis case, you have a choice as to which transition to run. </p>\n<p>Whenever a transition has <code>ε</code> as its label, it does not read anything from \ninput.</p>\n<p>Sometimes, you make a mistake and get stuck. In that case, press the <em>Reset</em> \nbutton to restart the level.</p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts only the empty word (denoted as <em>ε</em>).\n</details></p>"},"states":[{"name":"q0","position":{"x":200,"y":250},"isAccepting":false},{"name":"q1","position":{"x":350,"y":150},"isAccepting":false},{"name":"q2","position":{"x":500,"y":150},"isAccepting":true},{"name":"q3","position":{"x":350,"y":350},"isAccepting":false}],"inputAlphabet":[],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":220,"y":230},{"x":320,"y":158}],"labelPosition":{"x":270,"y":165}},{"stateFrom":"q0","stateTo":"q3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":220,"y":270},{"x":328,"y":328}],"labelPosition":{"x":270,"y":280}},{"stateFrom":"q1","stateTo":"q2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":370,"y":150},{"x":468,"y":150}],"labelPosition":{"x":420,"y":135}}],"word":[],"hideQueue":true},{"metadata":{"name":"Level 4","group":"NFA","groupIndex":3,"id":"level4","description":"<p>For an automaton to accept is input, in addition to the current state being \naccepting, there must be no more input remaining.</p>\n<h2 id=\"regularexpressions\">Regular expressions</h2>\n<p>When representing the languages NFAs can recognise, it is often convenient\nto use <strong>regular expressions</strong>. A regular expression can be\nconstructed in the following ways:</p>\n<ul>\n<li>A symbol (e.g. <code>a</code>), which recognises only exactly that symbol.</li>\n<li>An <code>ε</code> which recognises the empty string.</li>\n<li>A <code>∅</code> which recognises nothing.</li>\n<li><code>R*</code> with <code>R</code> being a regular expression recognising any word that can be \nbroken up into zero or more (potentially different) words all recognised \nby <code>R</code>.</li>\n<li><code>RS</code> with <code>R</code> and <code>S</code> being regular expressions recognising all words which \nstart with something recognised by <code>R</code> and end with something recognised \nby <code>S</code>.</li>\n<li><code>R + S</code> with <code>R</code> and <code>S</code> being regular expressions recognising either \nsomething recognised by <code>R</code> or something recognised by <code>S</code>.</li>\n<li><code>(R)</code> where <code>R</code> is a regular expression recognising exactly what <code>R</code> \nrecognises.</li>\n</ul>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">aa + aaa\n</code></pre>\n<p></details></p>"},"states":[{"name":"q0","position":{"x":150,"y":250},"isAccepting":false},{"name":"q1","position":{"x":250,"y":150},"isAccepting":false},{"name":"q2","position":{"x":450,"y":150},"isAccepting":false},{"name":"q3","position":{"x":250,"y":350},"isAccepting":false},{"name":"q4","position":{"x":450,"y":350},"isAccepting":false},{"name":"q5","position":{"x":550,"y":250},"isAccepting":true}],"inputAlphabet":["a"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":170,"y":230},{"x":227,"y":173}],"labelPosition":{"x":185,"y":185}},{"stateFrom":"q1","stateTo":"q2","input":"a","queueIn":null,"queueOut":null,"path":[{"x":278,"y":150},{"x":418,"y":150}],"labelPosition":{"x":345,"y":135}},{"stateFrom":"q2","stateTo":"q5","input":"a","queueIn":null,"queueOut":null,"path":[{"x":470,"y":170},{"x":527,"y":227}],"labelPosition":{"x":515,"y":185}},{"stateFrom":"q0","stateTo":"q3","input":"a","queueIn":null,"queueOut":null,"path":[{"x":170,"y":270},{"x":227,"y":327}],"labelPosition":{"x":215,"y":285}},{"stateFrom":"q3","stateTo":"q4","input":"a","queueIn":null,"queueOut":null,"path":[{"x":278,"y":350},{"x":418,"y":350}],"labelPosition":{"x":345,"y":335}},{"stateFrom":"q4","stateTo":"q5","input":"a","queueIn":null,"queueOut":null,"path":[{"x":470,"y":330},{"x":527,"y":273}],"labelPosition":{"x":485,"y":285}}],"word":["a","a","a"],"hideQueue":true},{"metadata":{"name":"Level 5","group":"NFA","groupIndex":4,"id":"level5","description":"<p>In many automata, there are loops which can allow the automata to accept \ninfinitely many words. In this case, you need to go through the \n<code>q0</code>-<code>q1</code>-<code>q0</code> loop to accept the input. </p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">(ab)*a\n</code></pre>\n<p></details></p>"},"states":[{"name":"q0","position":{"x":200,"y":250},"isAccepting":false},{"name":"q1","position":{"x":350,"y":250},"isAccepting":false},{"name":"q2","position":{"x":500,"y":250},"isAccepting":true}],"inputAlphabet":["a","b"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":"a","queueIn":null,"queueOut":null,"path":[{"x":220,"y":240},{"x":318,"y":240}],"labelPosition":{"x":270,"y":225}},{"stateFrom":"q1","stateTo":"q0","input":"b","queueIn":null,"queueOut":null,"path":[{"x":330,"y":260},{"x":228,"y":260}],"labelPosition":{"x":270,"y":275}},{"stateFrom":"q1","stateTo":"q2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":370,"y":250},{"x":468,"y":250}],"labelPosition":{"x":420,"y":235}}],"word":["a","b","a","b","a"],"hideQueue":true},{"metadata":{"name":"Level 6","group":"NFA","groupIndex":5,"id":"level6","description":"<p>Often, there are multiple possible loops in an automaton. In this level, you \nhave to find the correct sequence of loops to take to accept.</p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by </p>\n<pre><code class=\"text language-text\">(101 + 00)*\n</code></pre>\n<p></details></p>"},"states":[{"name":"q0","position":{"x":250,"y":250},"isAccepting":true},{"name":"q1","position":{"x":250,"y":400},"isAccepting":false},{"name":"q2","position":{"x":350,"y":100},"isAccepting":false},{"name":"q3","position":{"x":450,"y":250},"isAccepting":false}],"inputAlphabet":["0","1"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":"0","queueIn":null,"queueOut":null,"path":[{"x":260,"y":276},{"x":260,"y":370}],"labelPosition":{"x":275,"y":325}},{"stateFrom":"q1","stateTo":"q0","input":"0","queueIn":null,"queueOut":null,"path":[{"x":240,"y":374},{"x":240,"y":280}],"labelPosition":{"x":215,"y":325}},{"stateFrom":"q0","stateTo":"q2","input":"1","queueIn":null,"queueOut":null,"path":[{"x":266,"y":227},{"x":332,"y":127}],"labelPosition":{"x":281,"y":161}},{"stateFrom":"q2","stateTo":"q3","input":"0","queueIn":null,"queueOut":null,"path":[{"x":366,"y":123},{"x":432,"y":223}],"labelPosition":{"x":409,"y":161}},{"stateFrom":"q3","stateTo":"q0","input":"1","queueIn":null,"queueOut":null,"path":[{"x":422,"y":250},{"x":282,"y":250}],"labelPosition":{"x":345,"y":230}}],"word":["0","0","1","0","1","1","0","1","0","0"],"hideQueue":true},{"metadata":{"name":"Level 7","group":"NFA","groupIndex":6,"id":"level7","description":"<p>Many automata have multiple accepting states. For the automaton to accept, \nonly one of them has to be the current state. </p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">ab + a\n</code></pre>\n<p></details></p>"},"states":[{"name":"q0","position":{"x":200,"y":250},"isAccepting":false},{"name":"q1","position":{"x":350,"y":150},"isAccepting":false},{"name":"q2","position":{"x":500,"y":150},"isAccepting":true},{"name":"q3","position":{"x":350,"y":350},"isAccepting":false},{"name":"q4","position":{"x":500,"y":350},"isAccepting":true}],"inputAlphabet":["a","b"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":"a","queueIn":null,"queueOut":null,"path":[{"x":223,"y":234},{"x":323,"y":168}],"labelPosition":{"x":256,"y":186}},{"stateFrom":"q1","stateTo":"q2","input":"b","queueIn":null,"queueOut":null,"path":[{"x":378,"y":150},{"x":468,"y":150}],"labelPosition":{"x":420,"y":130}},{"stateFrom":"q0","stateTo":"q3","input":null,"queueIn":null,"queueOut":null,"path":[{"x":223,"y":266},{"x":323,"y":332}],"labelPosition":{"x":284,"y":286}},{"stateFrom":"q3","stateTo":"q4","input":"a","queueIn":null,"queueOut":null,"path":[{"x":378,"y":350},{"x":468,"y":350}],"labelPosition":{"x":420,"y":330}}],"word":["a","b"],"hideQueue":true},{"metadata":{"name":"Level 8","group":"NFA","groupIndex":7,"id":"level8","description":"<p>Sometimes, there are multiple different ways to accept some input. See if \nyou can find the two different ways in this level.</p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">(aaab + b)(a + b)*\n</code></pre>\n<p></details></p>"},"states":[{"name":"q0","position":{"x":150,"y":150},"isAccepting":false},{"name":"q1","position":{"x":250,"y":150},"isAccepting":false},{"name":"q2","position":{"x":350,"y":150},"isAccepting":false},{"name":"q3","position":{"x":450,"y":150},"isAccepting":false},{"name":"q4","position":{"x":150,"y":250},"isAccepting":false},{"name":"q5","position":{"x":250,"y":250},"isAccepting":false},{"name":"q6","position":{"x":350,"y":250},"isAccepting":false},{"name":"q7","position":{"x":450,"y":250},"isAccepting":false},{"name":"q8","position":{"x":550,"y":250},"isAccepting":true},{"name":"q9","position":{"x":150,"y":350},"isAccepting":false},{"name":"qA","position":{"x":250,"y":350},"isAccepting":false},{"name":"qB","position":{"x":350,"y":350},"isAccepting":false},{"name":"qC","position":{"x":450,"y":350},"isAccepting":false},{"name":"qD","position":{"x":550,"y":350},"isAccepting":false}],"inputAlphabet":["a","b","c"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":null,"queueIn":null,"queueOut":null,"path":[{"x":178,"y":150},{"x":218,"y":150}],"labelPosition":{"x":195,"y":130}},{"stateFrom":"q1","stateTo":"q2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":278,"y":150},{"x":318,"y":150}],"labelPosition":{"x":295,"y":130}},{"stateFrom":"q3","stateTo":"q2","input":null,"queueIn":null,"queueOut":null,"path":[{"x":422,"y":150},{"x":382,"y":150}],"labelPosition":{"x":395,"y":130}},{"stateFrom":"q1","stateTo":"q5","input":"a","queueIn":null,"queueOut":null,"path":[{"x":250,"y":178},{"x":250,"y":218}],"labelPosition":{"x":225,"y":200}},{"stateFrom":"q2","stateTo":"q6","input":"b","queueIn":null,"queueOut":null,"path":[{"x":350,"y":178},{"x":350,"y":218}],"labelPosition":{"x":325,"y":200}},{"stateFrom":"q7","stateTo":"q3","input":"c","queueIn":null,"queueOut":null,"path":[{"x":450,"y":222},{"x":450,"y":182}],"labelPosition":{"x":465,"y":200}},{"stateFrom":"q5","stateTo":"q4","input":"a","queueIn":null,"queueOut":null,"path":[{"x":222,"y":250},{"x":182,"y":250}],"labelPosition":{"x":195,"y":230}},{"stateFrom":"q6","stateTo":"q5","input":null,"queueIn":null,"queueOut":null,"path":[{"x":322,"y":250},{"x":282,"y":250}],"labelPosition":{"x":295,"y":230}},{"stateFrom":"q6","stateTo":"q7","input":null,"queueIn":null,"queueOut":null,"path":[{"x":378,"y":250},{"x":418,"y":250}],"labelPosition":{"x":395,"y":230}},{"stateFrom":"q7","stateTo":"q8","input":null,"queueIn":null,"queueOut":null,"path":[{"x":478,"y":250},{"x":518,"y":250}],"labelPosition":{"x":495,"y":230}},{"stateFrom":"q4","stateTo":"q9","input":"a","queueIn":null,"queueOut":null,"path":[{"x":150,"y":278},{"x":150,"y":318}],"labelPosition":{"x":165,"y":300}},{"stateFrom":"qB","stateTo":"q6","input":null,"queueIn":null,"queueOut":null,"path":[{"x":350,"y":322},{"x":350,"y":282}],"labelPosition":{"x":325,"y":300}},{"stateFrom":"q7","stateTo":"qC","input":"b","queueIn":null,"queueOut":null,"path":[{"x":450,"y":278},{"x":450,"y":318}],"labelPosition":{"x":425,"y":300}},{"stateFrom":"q8","stateTo":"qD","input":"a","queueIn":null,"queueOut":null,"path":[{"x":550,"y":278},{"x":550,"y":318}],"labelPosition":{"x":525,"y":300}},{"stateFrom":"q9","stateTo":"qA","input":"b","queueIn":null,"queueOut":null,"path":[{"x":178,"y":350},{"x":218,"y":350}],"labelPosition":{"x":195,"y":330}},{"stateFrom":"qA","stateTo":"qB","input":null,"queueIn":null,"queueOut":null,"path":[{"x":278,"y":350},{"x":318,"y":350}],"labelPosition":{"x":295,"y":330}},{"stateFrom":"qC","stateTo":"qB","input":null,"queueIn":null,"queueOut":null,"path":[{"x":422,"y":350},{"x":382,"y":350}],"labelPosition":{"x":395,"y":330}},{"stateFrom":"qD","stateTo":"qC","input":null,"queueIn":null,"queueOut":null,"path":[{"x":522,"y":350},{"x":482,"y":350}],"labelPosition":{"x":495,"y":330}}],"word":["b","c","b","a","a","b","a","b","c","b"],"hideQueue":true},{"metadata":{"name":"Level 9","group":"NFA","groupIndex":8,"id":"level9","description":"<p>Finding the regular expression that recognises the language of this level is \nmuch more challenging than in the previous levels, so don't worry if you \ncan't get it. It took me three pages of working and about 1 hour to find the \nregular expression.</p>\n<p>If you are interested in learning about an algorithm to convert an NFA into \na regular expression, look at\n<a href=\"https://en.wikipedia.org/wiki/Kleene%27s_algorithm\">Kleene's algorithm</a> \n(note Wikipedia uses <code>R1 | R2</code> instead of <code>R1 + R2</code>). </p>\n<p>Additionally, to simplify some regular expressions, <code>R?</code> is a shorthand for <code>\n(R + ε)</code> where <code>R</code> is a regular expression.</p>\n<p><details markdown>\n    <summary>Language</summary>\n    This automaton accepts the language recognised by:</p>\n<pre><code class=\"text language-text\">1(\n    (000?1?)*00?(01)? \n    + (00 + 01(1 + (000?1?)*000?11?)?0)*\n      0(1((000?1?)*00?(01)?)?)?\n)2\n</code></pre>\n<p>Don't worry if you got something different. I didn't use Kleene's \n algorithm, and there are many possible answers, so you're probably correct. \n</details></p>"},"states":[{"name":"q0","position":{"x":200,"y":100},"isAccepting":false},{"name":"q1","position":{"x":350,"y":100},"isAccepting":false},{"name":"q2","position":{"x":500,"y":100},"isAccepting":false},{"name":"q3","position":{"x":200,"y":250},"isAccepting":false},{"name":"q4","position":{"x":350,"y":250},"isAccepting":false},{"name":"q5","position":{"x":500,"y":250},"isAccepting":false},{"name":"q6","position":{"x":200,"y":400},"isAccepting":false},{"name":"q7","position":{"x":350,"y":400},"isAccepting":false},{"name":"q8","position":{"x":500,"y":400},"isAccepting":true}],"inputAlphabet":["0","1","2"],"queueAlphabet":[],"priorities":[],"initialState":"q0","transitions":[{"stateFrom":"q0","stateTo":"q1","input":"1","queueIn":null,"queueOut":null,"path":[{"x":228,"y":100},{"x":318,"y":100}],"labelPosition":{"x":270,"y":80}},{"stateFrom":"q2","stateTo":"q1","input":"0","queueIn":null,"queueOut":null,"path":[{"x":472,"y":100},{"x":382,"y":100}],"labelPosition":{"x":420,"y":80}},{"stateFrom":"q0","stateTo":"q3","input":"1","queueIn":null,"queueOut":null,"path":[{"x":200,"y":128},{"x":200,"y":218}],"labelPosition":{"x":175,"y":175}},{"stateFrom":"q1","stateTo":"q4","input":"0","queueIn":null,"queueOut":null,"path":[{"x":350,"y":128},{"x":350,"y":218}],"labelPosition":{"x":325,"y":175}},{"stateFrom":"q5","stateTo":"q2","input":"1","queueIn":null,"queueOut":null,"path":[{"x":500,"y":222},{"x":500,"y":132}],"labelPosition":{"x":515,"y":175}},{"stateFrom":"q4","stateTo":"q3","input":"1","queueIn":null,"queueOut":null,"path":[{"x":322,"y":250},{"x":232,"y":250}],"labelPosition":{"x":270,"y":230}},{"stateFrom":"q4","stateTo":"q5","input":"1","queueIn":null,"queueOut":null,"path":[{"x":378,"y":250},{"x":468,"y":250}],"labelPosition":{"x":420,"y":270}},{"stateFrom":"q3","stateTo":"q6","input":"0","queueIn":null,"queueOut":null,"path":[{"x":200,"y":278},{"x":200,"y":368}],"labelPosition":{"x":175,"y":325}},{"stateFrom":"q7","stateTo":"q4","input":"0","queueIn":null,"queueOut":null,"path":[{"x":350,"y":372},{"x":350,"y":282}],"labelPosition":{"x":365,"y":325}},{"stateFrom":"q5","stateTo":"q8","input":"2","queueIn":null,"queueOut":null,"path":[{"x":500,"y":278},{"x":500,"y":368}],"labelPosition":{"x":475,"y":325}},{"stateFrom":"q6","stateTo":"q7","input":"0","queueIn":null,"queueOut":null,"path":[{"x":228,"y":400},{"x":318,"y":400}],"labelPosition":{"x":270,"y":420}},{"stateFrom":"q7","stateTo":"q8","input":"2","queueIn":null,"queueOut":null,"path":[{"x":378,"y":400},{"x":468,"y":400}],"labelPosition":{"x":420,"y":380}},{"stateFrom":"q7","stateTo":"q3","input":"0","queueIn":null,"queueOut":null,"path":[{"x":338,"y":374},{"x":228,"y":264}],"labelPosition":{"x":291,"y":304}},{"stateFrom":"q3","stateTo":"q7","input":"0","queueIn":null,"queueOut":null,"path":[{"x":212,"y":276},{"x":322,"y":386}],"labelPosition":{"x":249,"y":346}},{"stateFrom":"q1","stateTo":"q5","input":"0","queueIn":null,"queueOut":null,"path":[{"x":362,"y":126},{"x":472,"y":236}],"labelPosition":{"x":399,"y":196}},{"stateFrom":"q5","stateTo":"q1","input":"0","queueIn":null,"queueOut":null,"path":[{"x":488,"y":224},{"x":378,"y":114}],"labelPosition":{"x":441,"y":154}}],"word":["1","0","0","0","1","1","0","0","1","0","2"],"hideQueue":true}],"groups":["NFA","PQA","Test"]}